import heapq

class PuzzleNode:
    def _init_(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.depth + self.heuristic()

    def _lt_(self, other):
        return self.cost < other.cost

    def _eq_(self, other):
        return self.state == other.state

    def _hash_(self):
        return hash(str(self.state))

    def heuristic(self):
        # Manhattan distance heuristic
        goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        h = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    x_goal, y_goal = divmod(self.state[i][j] - 1, 3)
                    h += abs(x_goal - i) + abs(y_goal - j)
        return h

    def get_blank_position(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

    def get_neighbors(self):
        neighbors = []
        x, y = self.get_blank_position()
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in self.state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                neighbors.append(PuzzleNode(new_state, self, (nx, ny)))
        return neighbors

def reconstruct_path(node):
    path = []
    while node is not None:
        path.append(node.move)
        node = node.parent
    return path[::-1]

def solve_puzzle(start_state):
    start_node = PuzzleNode(start_state)
    frontier = [start_node]
    explored = set()

    while frontier:
        node = heapq.heappop(frontier)
        if node.state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return reconstruct_path(node)
        explored.add(node)
        for neighbor in node.get_neighbors():
            if neighbor not in explored:
                heapq.heappush(frontier, neighbor)

    return None

# Example usage:
start_state = [[1, 2, 3], [4, 5, 0], [7, 8, 6]]
solution = solve_puzzle(start_state)
if solution:
    print("Solution found:")
    for move in solution:
        print(move)
else:
    print("No solution exists.")
