from itertools import permutations

def solve_cryptarithmetic(puzzle):
    # Extracting unique letters from the puzzle
    letters = set()
    for word in puzzle.split():
        letters |= set(word)
    letters = sorted(letters)

    # Generating all possible digit permutations
    for perm in permutations(range(10), len(letters)):
        # Mapping letters to digits
        mapping = dict(zip(letters, perm))
        
        # Check if any leading digit is zero
        if any(mapping[word[0]] == 0 for word in puzzle.split()):
            continue
        
        # Evaluating the puzzle expression with the current mapping
        expression = puzzle.translate(str.maketrans(mapping))
        if eval(expression):
            return mapping

    return None

# Example usage
puzzle = "SEND + MORE == MONEY"
solution = solve_cryptarithmetic(puzzle)
if solution:
    print("Solution found:")
    for letter, digit in solution.items():
        print(f"{letter}: {digit}")
else:
    print("No solution found.")
